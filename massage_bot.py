# %% [md]
# # RAG ChatBot with FAISS Embedder and Local Vector Store
# ## Context
# Often it is necessary to augment the 'knowledge' of a ChatBot with
# information. This bridges the gap between the general knowledge 
# contained within General Pre-trained Transformer and specific 
# information which might not be available to GPT. One of the common 
# scenarios is that there is a temporal discrepancy between the time 
# when the GTP has been constituted, and the time when it is utilized. 
# The other is that the GPT does not posses domain specific knowledge to 
# provide responses with desired quality.
# ## Objective
# In this particular example, the objective is to augment the GPT with
# the information from the domain of *therapeutical massage*, 
# effectively transforming the transformer into an expert in the
# domain of sport and remedial massage.
# The book is utilized as the source of information which will be
# utilized for augmentation.
# ## Technological Stack
# The back-end of the whole system is the `LangChain`package, because
# of convenient interfaces to `TextLoader`, `PrompTemplate`, and 
# `ChatPromtTemplate`. In this particular implementation the choice
# has been made to make a *local* vector database via the `FAISS`
# package. Some further capabilities provided by `AIMessage`, and 
# `HumanMessage` classes are utilized as well, to fully benefit from
# `LangChain` package.
# Finally, embeddings are generated by OpenAIs `OpenAIEmbedding`, and
# the GPT has ben also selected within the OpenAIs eco-system.
# ## Methodology
# Let us now import the necessary modules.
# %%
from utilities.general import environment_reader
from rag.embedding import GenericTextLoader, TextSplitter, \
    FAISSEmbedder, RAGChatBot
# %% [md]
# Let us declare the paths towards the input information from the book 
# about therapeutical massage.
# %% 
SOURCE_DOCUMENT = r'C:\Users\marko\Downloads\Sports And Remedial Massage Therapy ( PDFDrive ).pdf'
DOCUMENT_TYPE = 'pdf'
# %% [md]
# Let us read the PDF.
# %%
text_loader = GenericTextLoader(
    source_document=SOURCE_DOCUMENT,
    document_type=DOCUMENT_TYPE
)
text_loader.read_document()
document = text_loader.get_document()
# %% [md]
# Let us take a look how many pages there are in the document.
# %%
print(len(document))
# %% [md]
# Now it is necessary to split the documents into smaller sections, so
# that these sections can be transformed, into numerical 
# representations.
# %%
splitter = TextSplitter(document=document)
splitter.split_document()
converted_document = splitter.get_converted_document()
# %% [md]
# Let us take a look at the length of the document.
# %%
print(len(converted_document))
# %% [md]
# Let us now create a vector database locally via FEISS library.
# %%
local_index = FAISSEmbedder(
    pieces_of_text=converted_document,
    local_database='massage_bot',
    database_name='massage_bot'
)
local_index.create_vector_database()
# %% [md]
# As mentioned earlier, the database will be stored locally.
# %%
local_index.save_vector_database()
vector_database = local_index.get_vector_store()
# %% [md]
# Let us try the chat-bot.
# %%
chat_bot = RAGChatBot(vector_database=vector_database)
chat_bot.start_chat()